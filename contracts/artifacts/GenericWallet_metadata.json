{
	"compiler": {
		"version": "0.5.16+commit.9c3226ce"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "contract GenericERC20",
						"name": "appERC20",
						"type": "address"
					}
				],
				"name": "ApplicationCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "privilege",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "expirationDate",
						"type": "uint256"
					}
				],
				"name": "Privilege",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					}
				],
				"name": "burn",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					}
				],
				"name": "erc20AddressOf",
				"outputs": [
					{
						"internalType": "contract GenericERC20",
						"name": "erc20Address",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					}
				],
				"name": "expireTimeOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "expire",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "expirationDate",
						"type": "uint256"
					}
				],
				"name": "grantAccess",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					}
				],
				"name": "grantedAccessOf",
				"outputs": [
					{
						"internalType": "bool",
						"name": "hasGrant",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					}
				],
				"name": "mint",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "description",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "grantAccessToOwner",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "expirationDate",
						"type": "uint256"
					}
				],
				"name": "newApplication",
				"outputs": [],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeAccess",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					}
				],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "total",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					}
				],
				"name": "transfer",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address[]",
						"name": "senders",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "recipients",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "appOwner",
						"type": "address"
					}
				],
				"name": "transferBulk",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"balanceOf(address,address)": {
					"details": "Returns the amount of tokens owned by `account` for application `appOwner`."
				},
				"burn(address,uint256,address)": {
					"details": "Destroys `amount` tokens from `account`, reducing the total supply.     * Emits a {Transfer} event on ERC20 contract for `appOwner` application with `to` set to the zero address.     * Requirements     * - `account` cannot be the zero address. - `account` must have at least `amount` tokens. -  only accounts with grant access can call this function"
				},
				"erc20AddressOf(address)": {
					"details": "return the ERC20 address of an application `appOwner`"
				},
				"expireTimeOf(address,address)": {
					"details": "Returns the expirateDate of an account from an application `appOwner`"
				},
				"grantAccess(address,uint256)": {
					"params": {
						"account": "Address to grant access for an account.",
						"expirationDate": "Timestamp to when this gant will expire.     * Emits a {Privilege} event.      * Requirements:  expirationDate must be greater than now  only the application owner address can call this function"
					}
				},
				"grantedAccessOf(address,address)": {
					"details": "Returns if an account is grated for an application `appOwner`"
				},
				"mint(address,uint256,address)": {
					"details": "Creates `amount` tokens and assigns them to `account`, increasing the total supply for an especific application `appOwner`.     * Emits a {Tansfer} event on ERC20 contract for `appOwner` application with `from` set to the zero address.      * Requirements - `account` cannot be the zero address. -  only accounts with grant access can call this function"
				},
				"newApplication(string,string,bool,uint256)": {
					"params": {
						"description": "The description of the new application",
						"expirationDate": "Timestamp when the owner grant access will expire      * Emits an {ApplicationCreated} with appERC20 contaning the new ERC20 for this application      * Requirements: This function require an address without an application in this contract parameter name must be non-empty string",
						"grantAccessToOwner": "Indicates if the owner (sender) want to have grant access to manage his application",
						"name": "The name of the new application"
					}
				},
				"revokeAccess(address)": {
					"params": {
						"account": "Address to revoke access for an account.     * Emits a {Privilege} event.      * Requirements:  only the application owner address can call this function"
					}
				},
				"totalSupply(address)": {
					"details": "Returns the total supply from a application `appOwner`"
				},
				"transfer(address,address,uint256,address)": {
					"details": "Moves tokens `amount` from `sender` to `recipient`.      * Emits a {Transfer} event.     * Requirements:     * - `sender` cannot be the zero address. - `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`."
				},
				"transferBulk(address[],address[],uint256[],address)": {
					"details": "Moves tokens `amount` from `sender` to `recipient`.      * Emits a {Transfer} event for each transfer created.     * Requirements:     * - all address from `senders` cannot be the zero address. - all address from `recipients` cannot be the zero address. - all address from `senders` must have a balance of at least respective amount from `amounts` ."
				}
			}
		},
		"userdoc": {
			"methods": {
				"grantAccess(address,uint256)": {
					"notice": "Grant access for an account until  expireGrantAccessDate. Can be used to update the expireGrantAccessDate. "
				},
				"newApplication(string,string,bool,uint256)": {
					"notice": "Create a new application for the sender address "
				},
				"revokeAccess(address)": {
					"notice": "Revoke access for an `account`. "
				}
			},
			"notice": "This contract manage generic wallet applications. Every new application creates a new ERC20 Token. The owner can grant/revoke acccount to manage his application. The owner and/or granted accounts can manage these tokens by   creating new token (mint)  remove token (burn)  tranfer token between accounts (transfer / transferBulk)"
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/GenereicWallet.sol": "GenericWallet"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/GSN/Context.sol": {
			"keccak256": "0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061",
			"urls": [
				"bzz-raw://216ef9d6b614db4eb46970b4e84903f2534a45572dd30a79f0041f1a5830f436",
				"dweb:/ipfs/QmNPrJ4MWKUAWzKXpUqeyKRUfosaoANZAqXgvepdrCwZAG"
			]
		},
		"@openzeppelin/contracts/math/SafeMath.sol": {
			"keccak256": "0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076",
			"urls": [
				"bzz-raw://31113152e1ddb78fe7a4197f247591ca894e93f916867beb708d8e747b6cc74f",
				"dweb:/ipfs/QmbZaJyXdpsYGykVhHH9qpVGQg9DGCxE2QufbCUy3daTgq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xf38098676e40a5197eb0dd7a9fea224b21ddea211e256ae9cc9a8aa17130cac1",
			"urls": [
				"bzz-raw://9725af553245887b58c364d0df9c3acde44ee5f25d5e4c6b02ecbce232ae0b86",
				"dweb:/ipfs/QmXNVdqAzB5Ni6TTx2XZUXrgDh2KqKMySNMhCxkQkLPki2"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9",
			"urls": [
				"bzz-raw://59fd025151435da35faa8093a5c7a17de02de9d08ad27275c5cdf05050820d91",
				"dweb:/ipfs/QmQMvwEcPhoRXzbXyrdoeRtvLoifUW9Qh7Luho7bmUPRkc"
			]
		},
		"localhost/contracts/GenereicWallet.sol": {
			"keccak256": "0x4a1edba08d7ef73f382aaea544ac3cded139662be74b60d672b66f9aa21ee7cb",
			"urls": [
				"bzz-raw://cba1fbb30db31d706fe38b3986313ed572bc8939388e1c92378fa126cbbac4b9",
				"dweb:/ipfs/QmUqt5BwR1wk1hgvNuc2T4CdsuHCeiJ1e1NQk4Fb6sEJX7"
			]
		},
		"localhost/contracts/GenericERC20.sol": {
			"keccak256": "0xdd84cd87606a6bbb2a6bc0ca5ba0d5a7707f58f8028a6af93d9dcf06b1908ac1",
			"urls": [
				"bzz-raw://1ffba3c6100a509b92bcb1637e8af2f172c5c262f2b624b5f6a3a860de1df0e8",
				"dweb:/ipfs/QmW33rWPZfXYzLH79c7HC6fpEP8Je729Y2FAKB4y56dvVm"
			]
		}
	},
	"version": 1
}